plugins {
	id 'java'
	id 'jacoco'
	id 'org.sonarqube' version '3.5.0.2730'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.diffplug.spotless' version "6.16.0"
	id "io.freefair.lombok" version "6.6.2"
}

group = 'com.github.ehayik'
version = '0.0.1'

repositories {
	mavenCentral()
}

ext {
	set('springShellVersion', "3.0.0")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.shell:spring-shell-starter'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.javamoney:moneta:1.4.2'
	implementation 'net.sizovs:pipelinr:0.8'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'com.maciejwalkowiak.spring:wiremock-spring-boot:1.0.0'
	testImplementation 'org.awaitility:awaitility:4.2.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.shell:spring-shell-dependencies:${springShellVersion}"
	}
}

bootJar {
	launchScript()
}

//-- Java version
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

//-- Code coverage
jacocoTestReport {
	reports {
		xml.required.set(true)
	}
}

test.finalizedBy jacocoTestReport

//-- Static code analysis
sonarqube {
	properties {
		property "sonar.projectKey", "ehayik_coindesk-client"
		property "sonar.organization", "eljaiek"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

//-- Code formatting
apply plugin: 'com.diffplug.spotless'

spotless {
	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**'
		}
		palantirJavaFormat()
		importOrder()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
		toggleOffOn()
	}
}

tasks.register('updateGitHooks', Copy) {
	from './scripts/pre-commit'
	into './.git/hooks'
}

compileJava.dependsOn updateGitHooks

//-- Cleaning
tasks.register("deleteLogs", Delete) {
	delete fileTree('.') {
		include '**/*.log'
		include '**/*.gz'
	}
}

clean.dependsOn deleteLogs